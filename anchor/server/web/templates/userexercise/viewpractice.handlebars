<div class="container-fluid h-100">
    <div class="row h-100">
      {{>dashboardNav}}
        <div class="col-sm-9 col-md-10">
            <div style="padding: 30px">
                <h3>Practice Exercises</h3>
                <br>
                <div class="card">
                    <div style="padding: 20px">
                        <table id="pracTable" class="table table-striped table-bordered" cellspacing="0" width="100%">
                            <thead>
                            <tr>
                                <th>Data</th>
                                <th>Record Id</th>
                                <th>ExerciseName</th>
                                <th>UserId</th>
                                <th>Name</th>
                                <th>ExerciseId</th>
                                <th>CreatedAt</th>
                              {{#role user 'admin'}}
                                  <th>Edit</th>
                                  <th>Delete</th>
                              {{/role}}
                            </tr>
                            </thead>
                        </table>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
  ////// for caching pages ///////////////
  //
  // Pipelining function for DataTables. To be used to the `ajax` option of DataTables
  //
  $.fn.dataTable.pipeline = function ( opts ) {
    // Configuration options
    var conf = $.extend( {
      pages: 5,     // number of pages to cache
      url: '',      // script url
      data: null,   // function or object with parameters to send to the server
                    // matching how `ajax.data` works in DataTables
      method: 'GET' // Ajax HTTP method
    }, opts );

    // Private variables for storing the cache
    var cacheLower = -1;
    var cacheUpper = null;
    var cacheLastRequest = null;
    var cacheLastJson = null;

    return function ( request, drawCallback, settings ) {
      var ajax          = false;
      var requestStart  = request.start;
      var drawStart     = request.start;
      var requestLength = request.length;
      var requestEnd    = requestStart + requestLength;

      if ( settings.clearCache ) {
        // API requested that the cache be cleared
        ajax = true;
        settings.clearCache = false;
      }
      else if ( cacheLower < 0 || requestStart < cacheLower || requestEnd > cacheUpper ) {
        // outside cached data - need to make a request
        ajax = true;
      }
      else if ( JSON.stringify( request.order )   !== JSON.stringify( cacheLastRequest.order ) ||
        JSON.stringify( request.columns ) !== JSON.stringify( cacheLastRequest.columns ) ||
        JSON.stringify( request.search )  !== JSON.stringify( cacheLastRequest.search )
      ) {
        // properties changed (ordering, columns, searching)
        ajax = true;
      }

      // Store the request for checking next time around
      cacheLastRequest = $.extend( true, {}, request );

      if ( ajax ) {
        // Need data from the server
        if ( requestStart < cacheLower ) {
          requestStart = requestStart - (requestLength*(conf.pages-1));

          if ( requestStart < 0 ) {
            requestStart = 0;
          }
        }

        cacheLower = requestStart;
        cacheUpper = requestStart + (requestLength * conf.pages);

        request.start = requestStart;
        request.length = requestLength*conf.pages;

        // Provide the same `data` options as DataTables.
        if ( typeof conf.data === 'function' ) {
          // As a function it is executed with the data object as an arg
          // for manipulation. If an object is returned, it is used as the
          // data object to submit
          var d = conf.data( request );
          if ( d ) {
            $.extend( request, d );
          }
        }
        else if ( $.isPlainObject( conf.data ) ) {
          // As an object, the data given extends the default
          $.extend( request, conf.data );
        }

        settings.jqXHR = $.ajax( {
          "type":     conf.method,
          "url":      conf.url,
          "data":     request,
          "dataType": "json",
          "cache":    false,
          "success":  function ( json ) {
            cacheLastJson = $.extend(true, {}, json);

            if ( cacheLower != drawStart ) {
              json.data.splice( 0, drawStart-cacheLower );
            }
            if ( requestLength >= -1 ) {
              json.data.splice( requestLength, json.data.length );
            }

            drawCallback( json );
          }
        } );
      }
      else {
        json = $.extend( true, {}, cacheLastJson );
        json.draw = request.draw; // Update the echo for each response
        json.data.splice( 0, requestStart-cacheLower );
        json.data.splice( requestLength, json.data.length );

        drawCallback(json);
      }
    }
  };

  // Register an API method that will empty the pipelined data, forcing an Ajax
  // fetch on the next draw (i.e. `table.clearPipeline().draw()`)
  $.fn.dataTable.Api.register( 'clearPipeline()', function () {
    return this.iterator( 'table', function ( settings ) {
      settings.clearCache = true;
    } );
  } );


  //
  // DataTables initialisation
  //
  // $(document).ready(function() {
  //   $('#example').DataTable( {
  //     "processing": true,
  //     "serverSide": true,
  //     "ajax": $.fn.dataTable.pipeline( {
  //       url: 'scripts/server_processing.php',
  //       pages: 5 // number of pages to cache
  //     } )
  //   } );
  // } );

  ///////////////////////////////////////////////////

    var table;
    $(document).ready(function () {
        var userAndExerciseIds = [];
        var recordId = '';
        table = $('#pracTable').DataTable({
            processing: true,
            serverSide: true,
            scrollX: true,
            scrollY: '500px',
            scrollCollapse: true,
            dom: 'Bfrtip',
            buttons: [
                'copy', 'csv', 'excel', 'pdf', 'print', 'colvis'
            ],
            // ajax: {
            //     url : "api/table/practiceExercise",
            //     data: function (d) {
            //         d.fields = "_id exerciseName userId exerciseId referenceId createdAt";
            //     },
            // },

            ajax: $.fn.dataTable.pipeline( {
              url : "api/table/practiceExercise",
                  data: function (d) {
                      d.fields = "_id exerciseName userId exerciseId referenceId createdAt";
                  },
                  pages: 5 // number of pages to cache
            }),

            columns: [
                {{#role user 'clinician'}}
                {
                  data: "createdAt",
                  render: function (data, type, row) {

                    recordId = row._id;
                    userAndExerciseIds = [row.userId, row.exerciseId, row.exerciseName? row.exerciseName.split(/[\s,]+/).join("_"): "", row.name? row.name.split(/[\s,]+/).join("_"): "", row.createdAt];

                      return '<button class="btn btn-primary btm-sm" id="download'+row.exerciseId+'" href="#" value="Generate data" onclick="downloadDataForPractice(\'' + userAndExerciseIds + '\', \'' + recordId + '\')">Download</button>';
                  }

                },
                {{/role}}
                {
                    data: "_id",
                    defaultContent: "",
                    searchable: false
                },
                {
                    data: "exerciseName",
                    defaultContent: "",
                    orderable: false,
                    searchable: true
                },
                {
                    data: "userId",
                    visible: false,
                    defaultContent: ""
                },
                {
                    data: "name",
                    visible: true,
                    defaultContent: "",
                    orderable: false,
                    searchable: true
                },
                {
                    data: "exerciseId",
                    visible: false,
                    defaultContent: ""
                },
                {
                    data: "createdAt",
                    render: function (data, type, row) {
                       var date = new Date(row.createdAt);
                       return date.toDateString() + ' ' + date.toLocaleTimeString('en-us');
                    }
                },
              {{#role user 'admin'}}
                  {
                      data: "_id",
                      visible: false,
                      render: function (data, type, row) {
                          // if ( row.type === 'Reference' ) {
                            return '<button class="btn btn-secondary" id="edit' + row._id + '" onclick="editDocPrac(\'' + row._id + '\')">Edit</button>';
                          // }
                          // else {
                          //   return'';
                          // }
                      },
                  },
                  {
                      data: "_id",
                      visible: false,
                      render: function (data, type, row) {
                          return '<button class="btn btn-danger" id="delete' + row._id + '" onclick="deleteDocPrac(\'' + row._id + '\')">Delete</button>';
                      },

                  }
              {{/role}}
            ]
        });
    });
</script>


<script type="text/javascript" src="public/scripts/userexercise/viewReferenceAndPractice.js"></script>
<link rel="stylesheet" href="public/css/styleSheet/genericStyles.css">
